<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yan.crowdfunding.mapper.InnodbLockWaitsMapper">
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.InnodbLockWaits">
    <result column="wait_started" jdbcType="TIMESTAMP" property="waitStarted" />
    <result column="wait_age" jdbcType="TIME" property="waitAge" />
    <result column="wait_age_secs" jdbcType="BIGINT" property="waitAgeSecs" />
    <result column="locked_table" jdbcType="VARCHAR" property="lockedTable" />
    <result column="locked_index" jdbcType="VARCHAR" property="lockedIndex" />
    <result column="locked_type" jdbcType="VARCHAR" property="lockedType" />
    <result column="waiting_trx_id" jdbcType="VARCHAR" property="waitingTrxId" />
    <result column="waiting_trx_started" jdbcType="TIMESTAMP" property="waitingTrxStarted" />
    <result column="waiting_trx_age" jdbcType="TIME" property="waitingTrxAge" />
    <result column="waiting_trx_rows_locked" jdbcType="BIGINT" property="waitingTrxRowsLocked" />
    <result column="waiting_trx_rows_modified" jdbcType="BIGINT" property="waitingTrxRowsModified" />
    <result column="waiting_pid" jdbcType="BIGINT" property="waitingPid" />
    <result column="waiting_lock_id" jdbcType="VARCHAR" property="waitingLockId" />
    <result column="waiting_lock_mode" jdbcType="VARCHAR" property="waitingLockMode" />
    <result column="blocking_trx_id" jdbcType="VARCHAR" property="blockingTrxId" />
    <result column="blocking_pid" jdbcType="BIGINT" property="blockingPid" />
    <result column="blocking_lock_id" jdbcType="VARCHAR" property="blockingLockId" />
    <result column="blocking_lock_mode" jdbcType="VARCHAR" property="blockingLockMode" />
    <result column="blocking_trx_started" jdbcType="TIMESTAMP" property="blockingTrxStarted" />
    <result column="blocking_trx_age" jdbcType="TIME" property="blockingTrxAge" />
    <result column="blocking_trx_rows_locked" jdbcType="BIGINT" property="blockingTrxRowsLocked" />
    <result column="blocking_trx_rows_modified" jdbcType="BIGINT" property="blockingTrxRowsModified" />
    <result column="sql_kill_blocking_query" jdbcType="VARCHAR" property="sqlKillBlockingQuery" />
    <result column="sql_kill_blocking_connection" jdbcType="VARCHAR" property="sqlKillBlockingConnection" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yan.crowdfunding.entity.InnodbLockWaitsWithBLOBs">
    <result column="waiting_query" jdbcType="LONGVARCHAR" property="waitingQuery" />
    <result column="blocking_query" jdbcType="LONGVARCHAR" property="blockingQuery" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    wait_started, wait_age, wait_age_secs, locked_table, locked_index, locked_type, waiting_trx_id, 
    waiting_trx_started, waiting_trx_age, waiting_trx_rows_locked, waiting_trx_rows_modified, 
    waiting_pid, waiting_lock_id, waiting_lock_mode, blocking_trx_id, blocking_pid, blocking_lock_id, 
    blocking_lock_mode, blocking_trx_started, blocking_trx_age, blocking_trx_rows_locked, 
    blocking_trx_rows_modified, sql_kill_blocking_query, sql_kill_blocking_connection
  </sql>
  <sql id="Blob_Column_List">
    waiting_query, blocking_query
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from innodb_lock_waits
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from innodb_lock_waits
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample">
    delete from innodb_lock_waits
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsWithBLOBs">
    insert into innodb_lock_waits (wait_started, wait_age, wait_age_secs, 
      locked_table, locked_index, locked_type, 
      waiting_trx_id, waiting_trx_started, waiting_trx_age, 
      waiting_trx_rows_locked, waiting_trx_rows_modified, 
      waiting_pid, waiting_lock_id, waiting_lock_mode, 
      blocking_trx_id, blocking_pid, blocking_lock_id, 
      blocking_lock_mode, blocking_trx_started, 
      blocking_trx_age, blocking_trx_rows_locked, blocking_trx_rows_modified, 
      sql_kill_blocking_query, sql_kill_blocking_connection, 
      waiting_query, blocking_query)
    values (#{waitStarted,jdbcType=TIMESTAMP}, #{waitAge,jdbcType=TIME}, #{waitAgeSecs,jdbcType=BIGINT}, 
      #{lockedTable,jdbcType=VARCHAR}, #{lockedIndex,jdbcType=VARCHAR}, #{lockedType,jdbcType=VARCHAR}, 
      #{waitingTrxId,jdbcType=VARCHAR}, #{waitingTrxStarted,jdbcType=TIMESTAMP}, #{waitingTrxAge,jdbcType=TIME}, 
      #{waitingTrxRowsLocked,jdbcType=BIGINT}, #{waitingTrxRowsModified,jdbcType=BIGINT}, 
      #{waitingPid,jdbcType=BIGINT}, #{waitingLockId,jdbcType=VARCHAR}, #{waitingLockMode,jdbcType=VARCHAR}, 
      #{blockingTrxId,jdbcType=VARCHAR}, #{blockingPid,jdbcType=BIGINT}, #{blockingLockId,jdbcType=VARCHAR}, 
      #{blockingLockMode,jdbcType=VARCHAR}, #{blockingTrxStarted,jdbcType=TIMESTAMP}, 
      #{blockingTrxAge,jdbcType=TIME}, #{blockingTrxRowsLocked,jdbcType=BIGINT}, #{blockingTrxRowsModified,jdbcType=BIGINT}, 
      #{sqlKillBlockingQuery,jdbcType=VARCHAR}, #{sqlKillBlockingConnection,jdbcType=VARCHAR}, 
      #{waitingQuery,jdbcType=LONGVARCHAR}, #{blockingQuery,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsWithBLOBs">
    insert into innodb_lock_waits
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="waitStarted != null">
        wait_started,
      </if>
      <if test="waitAge != null">
        wait_age,
      </if>
      <if test="waitAgeSecs != null">
        wait_age_secs,
      </if>
      <if test="lockedTable != null">
        locked_table,
      </if>
      <if test="lockedIndex != null">
        locked_index,
      </if>
      <if test="lockedType != null">
        locked_type,
      </if>
      <if test="waitingTrxId != null">
        waiting_trx_id,
      </if>
      <if test="waitingTrxStarted != null">
        waiting_trx_started,
      </if>
      <if test="waitingTrxAge != null">
        waiting_trx_age,
      </if>
      <if test="waitingTrxRowsLocked != null">
        waiting_trx_rows_locked,
      </if>
      <if test="waitingTrxRowsModified != null">
        waiting_trx_rows_modified,
      </if>
      <if test="waitingPid != null">
        waiting_pid,
      </if>
      <if test="waitingLockId != null">
        waiting_lock_id,
      </if>
      <if test="waitingLockMode != null">
        waiting_lock_mode,
      </if>
      <if test="blockingTrxId != null">
        blocking_trx_id,
      </if>
      <if test="blockingPid != null">
        blocking_pid,
      </if>
      <if test="blockingLockId != null">
        blocking_lock_id,
      </if>
      <if test="blockingLockMode != null">
        blocking_lock_mode,
      </if>
      <if test="blockingTrxStarted != null">
        blocking_trx_started,
      </if>
      <if test="blockingTrxAge != null">
        blocking_trx_age,
      </if>
      <if test="blockingTrxRowsLocked != null">
        blocking_trx_rows_locked,
      </if>
      <if test="blockingTrxRowsModified != null">
        blocking_trx_rows_modified,
      </if>
      <if test="sqlKillBlockingQuery != null">
        sql_kill_blocking_query,
      </if>
      <if test="sqlKillBlockingConnection != null">
        sql_kill_blocking_connection,
      </if>
      <if test="waitingQuery != null">
        waiting_query,
      </if>
      <if test="blockingQuery != null">
        blocking_query,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="waitStarted != null">
        #{waitStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="waitAge != null">
        #{waitAge,jdbcType=TIME},
      </if>
      <if test="waitAgeSecs != null">
        #{waitAgeSecs,jdbcType=BIGINT},
      </if>
      <if test="lockedTable != null">
        #{lockedTable,jdbcType=VARCHAR},
      </if>
      <if test="lockedIndex != null">
        #{lockedIndex,jdbcType=VARCHAR},
      </if>
      <if test="lockedType != null">
        #{lockedType,jdbcType=VARCHAR},
      </if>
      <if test="waitingTrxId != null">
        #{waitingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="waitingTrxStarted != null">
        #{waitingTrxStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="waitingTrxAge != null">
        #{waitingTrxAge,jdbcType=TIME},
      </if>
      <if test="waitingTrxRowsLocked != null">
        #{waitingTrxRowsLocked,jdbcType=BIGINT},
      </if>
      <if test="waitingTrxRowsModified != null">
        #{waitingTrxRowsModified,jdbcType=BIGINT},
      </if>
      <if test="waitingPid != null">
        #{waitingPid,jdbcType=BIGINT},
      </if>
      <if test="waitingLockId != null">
        #{waitingLockId,jdbcType=VARCHAR},
      </if>
      <if test="waitingLockMode != null">
        #{waitingLockMode,jdbcType=VARCHAR},
      </if>
      <if test="blockingTrxId != null">
        #{blockingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="blockingPid != null">
        #{blockingPid,jdbcType=BIGINT},
      </if>
      <if test="blockingLockId != null">
        #{blockingLockId,jdbcType=VARCHAR},
      </if>
      <if test="blockingLockMode != null">
        #{blockingLockMode,jdbcType=VARCHAR},
      </if>
      <if test="blockingTrxStarted != null">
        #{blockingTrxStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="blockingTrxAge != null">
        #{blockingTrxAge,jdbcType=TIME},
      </if>
      <if test="blockingTrxRowsLocked != null">
        #{blockingTrxRowsLocked,jdbcType=BIGINT},
      </if>
      <if test="blockingTrxRowsModified != null">
        #{blockingTrxRowsModified,jdbcType=BIGINT},
      </if>
      <if test="sqlKillBlockingQuery != null">
        #{sqlKillBlockingQuery,jdbcType=VARCHAR},
      </if>
      <if test="sqlKillBlockingConnection != null">
        #{sqlKillBlockingConnection,jdbcType=VARCHAR},
      </if>
      <if test="waitingQuery != null">
        #{waitingQuery,jdbcType=LONGVARCHAR},
      </if>
      <if test="blockingQuery != null">
        #{blockingQuery,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample" resultType="java.lang.Integer">
    select count(*) from innodb_lock_waits
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update innodb_lock_waits
    <set>
      <if test="record.waitStarted != null">
        wait_started = #{record.waitStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="record.waitAge != null">
        wait_age = #{record.waitAge,jdbcType=TIME},
      </if>
      <if test="record.waitAgeSecs != null">
        wait_age_secs = #{record.waitAgeSecs,jdbcType=BIGINT},
      </if>
      <if test="record.lockedTable != null">
        locked_table = #{record.lockedTable,jdbcType=VARCHAR},
      </if>
      <if test="record.lockedIndex != null">
        locked_index = #{record.lockedIndex,jdbcType=VARCHAR},
      </if>
      <if test="record.lockedType != null">
        locked_type = #{record.lockedType,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingTrxId != null">
        waiting_trx_id = #{record.waitingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingTrxStarted != null">
        waiting_trx_started = #{record.waitingTrxStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="record.waitingTrxAge != null">
        waiting_trx_age = #{record.waitingTrxAge,jdbcType=TIME},
      </if>
      <if test="record.waitingTrxRowsLocked != null">
        waiting_trx_rows_locked = #{record.waitingTrxRowsLocked,jdbcType=BIGINT},
      </if>
      <if test="record.waitingTrxRowsModified != null">
        waiting_trx_rows_modified = #{record.waitingTrxRowsModified,jdbcType=BIGINT},
      </if>
      <if test="record.waitingPid != null">
        waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      </if>
      <if test="record.waitingLockId != null">
        waiting_lock_id = #{record.waitingLockId,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingLockMode != null">
        waiting_lock_mode = #{record.waitingLockMode,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingTrxId != null">
        blocking_trx_id = #{record.blockingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingPid != null">
        blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      </if>
      <if test="record.blockingLockId != null">
        blocking_lock_id = #{record.blockingLockId,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingLockMode != null">
        blocking_lock_mode = #{record.blockingLockMode,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingTrxStarted != null">
        blocking_trx_started = #{record.blockingTrxStarted,jdbcType=TIMESTAMP},
      </if>
      <if test="record.blockingTrxAge != null">
        blocking_trx_age = #{record.blockingTrxAge,jdbcType=TIME},
      </if>
      <if test="record.blockingTrxRowsLocked != null">
        blocking_trx_rows_locked = #{record.blockingTrxRowsLocked,jdbcType=BIGINT},
      </if>
      <if test="record.blockingTrxRowsModified != null">
        blocking_trx_rows_modified = #{record.blockingTrxRowsModified,jdbcType=BIGINT},
      </if>
      <if test="record.sqlKillBlockingQuery != null">
        sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      </if>
      <if test="record.sqlKillBlockingConnection != null">
        sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingQuery != null">
        waiting_query = #{record.waitingQuery,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.blockingQuery != null">
        blocking_query = #{record.blockingQuery,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update innodb_lock_waits
    set wait_started = #{record.waitStarted,jdbcType=TIMESTAMP},
      wait_age = #{record.waitAge,jdbcType=TIME},
      wait_age_secs = #{record.waitAgeSecs,jdbcType=BIGINT},
      locked_table = #{record.lockedTable,jdbcType=VARCHAR},
      locked_index = #{record.lockedIndex,jdbcType=VARCHAR},
      locked_type = #{record.lockedType,jdbcType=VARCHAR},
      waiting_trx_id = #{record.waitingTrxId,jdbcType=VARCHAR},
      waiting_trx_started = #{record.waitingTrxStarted,jdbcType=TIMESTAMP},
      waiting_trx_age = #{record.waitingTrxAge,jdbcType=TIME},
      waiting_trx_rows_locked = #{record.waitingTrxRowsLocked,jdbcType=BIGINT},
      waiting_trx_rows_modified = #{record.waitingTrxRowsModified,jdbcType=BIGINT},
      waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      waiting_lock_id = #{record.waitingLockId,jdbcType=VARCHAR},
      waiting_lock_mode = #{record.waitingLockMode,jdbcType=VARCHAR},
      blocking_trx_id = #{record.blockingTrxId,jdbcType=VARCHAR},
      blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      blocking_lock_id = #{record.blockingLockId,jdbcType=VARCHAR},
      blocking_lock_mode = #{record.blockingLockMode,jdbcType=VARCHAR},
      blocking_trx_started = #{record.blockingTrxStarted,jdbcType=TIMESTAMP},
      blocking_trx_age = #{record.blockingTrxAge,jdbcType=TIME},
      blocking_trx_rows_locked = #{record.blockingTrxRowsLocked,jdbcType=BIGINT},
      blocking_trx_rows_modified = #{record.blockingTrxRowsModified,jdbcType=BIGINT},
      sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR},
      waiting_query = #{record.waitingQuery,jdbcType=LONGVARCHAR},
      blocking_query = #{record.blockingQuery,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update innodb_lock_waits
    set wait_started = #{record.waitStarted,jdbcType=TIMESTAMP},
      wait_age = #{record.waitAge,jdbcType=TIME},
      wait_age_secs = #{record.waitAgeSecs,jdbcType=BIGINT},
      locked_table = #{record.lockedTable,jdbcType=VARCHAR},
      locked_index = #{record.lockedIndex,jdbcType=VARCHAR},
      locked_type = #{record.lockedType,jdbcType=VARCHAR},
      waiting_trx_id = #{record.waitingTrxId,jdbcType=VARCHAR},
      waiting_trx_started = #{record.waitingTrxStarted,jdbcType=TIMESTAMP},
      waiting_trx_age = #{record.waitingTrxAge,jdbcType=TIME},
      waiting_trx_rows_locked = #{record.waitingTrxRowsLocked,jdbcType=BIGINT},
      waiting_trx_rows_modified = #{record.waitingTrxRowsModified,jdbcType=BIGINT},
      waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      waiting_lock_id = #{record.waitingLockId,jdbcType=VARCHAR},
      waiting_lock_mode = #{record.waitingLockMode,jdbcType=VARCHAR},
      blocking_trx_id = #{record.blockingTrxId,jdbcType=VARCHAR},
      blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      blocking_lock_id = #{record.blockingLockId,jdbcType=VARCHAR},
      blocking_lock_mode = #{record.blockingLockMode,jdbcType=VARCHAR},
      blocking_trx_started = #{record.blockingTrxStarted,jdbcType=TIMESTAMP},
      blocking_trx_age = #{record.blockingTrxAge,jdbcType=TIME},
      blocking_trx_rows_locked = #{record.blockingTrxRowsLocked,jdbcType=BIGINT},
      blocking_trx_rows_modified = #{record.blockingTrxRowsModified,jdbcType=BIGINT},
      sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.InnodbLockWaits">
    <result column="requesting_trx_id" jdbcType="VARCHAR" property="requestingTrxId" />
    <result column="requested_lock_id" jdbcType="VARCHAR" property="requestedLockId" />
    <result column="blocking_trx_id" jdbcType="VARCHAR" property="blockingTrxId" />
    <result column="blocking_lock_id" jdbcType="VARCHAR" property="blockingLockId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    requesting_trx_id, requested_lock_id, blocking_trx_id, blocking_lock_id
  </sql>
  <select id="selectByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from INNODB_LOCK_WAITS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample">
    delete from INNODB_LOCK_WAITS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.InnodbLockWaits">
    insert into INNODB_LOCK_WAITS (requesting_trx_id, requested_lock_id, 
      blocking_trx_id, blocking_lock_id)
    values (#{requestingTrxId,jdbcType=VARCHAR}, #{requestedLockId,jdbcType=VARCHAR}, 
      #{blockingTrxId,jdbcType=VARCHAR}, #{blockingLockId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.InnodbLockWaits">
    insert into INNODB_LOCK_WAITS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="requestingTrxId != null">
        requesting_trx_id,
      </if>
      <if test="requestedLockId != null">
        requested_lock_id,
      </if>
      <if test="blockingTrxId != null">
        blocking_trx_id,
      </if>
      <if test="blockingLockId != null">
        blocking_lock_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="requestingTrxId != null">
        #{requestingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="requestedLockId != null">
        #{requestedLockId,jdbcType=VARCHAR},
      </if>
      <if test="blockingTrxId != null">
        #{blockingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="blockingLockId != null">
        #{blockingLockId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.InnodbLockWaitsExample" resultType="java.lang.Integer">
    select count(*) from INNODB_LOCK_WAITS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update INNODB_LOCK_WAITS
    <set>
      <if test="record.requestingTrxId != null">
        requesting_trx_id = #{record.requestingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="record.requestedLockId != null">
        requested_lock_id = #{record.requestedLockId,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingTrxId != null">
        blocking_trx_id = #{record.blockingTrxId,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingLockId != null">
        blocking_lock_id = #{record.blockingLockId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update INNODB_LOCK_WAITS
    set requesting_trx_id = #{record.requestingTrxId,jdbcType=VARCHAR},
      requested_lock_id = #{record.requestedLockId,jdbcType=VARCHAR},
      blocking_trx_id = #{record.blockingTrxId,jdbcType=VARCHAR},
      blocking_lock_id = #{record.blockingLockId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>