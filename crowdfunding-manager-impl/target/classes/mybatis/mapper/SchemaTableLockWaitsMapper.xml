<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yan.crowdfunding.mapper.SchemaTableLockWaitsMapper" >
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.SchemaTableLockWaits" >
    <result column="object_schema" property="objectSchema" jdbcType="VARCHAR" />
    <result column="object_name" property="objectName" jdbcType="VARCHAR" />
    <result column="waiting_thread_id" property="waitingThreadId" jdbcType="BIGINT" />
    <result column="waiting_pid" property="waitingPid" jdbcType="BIGINT" />
    <result column="waiting_lock_type" property="waitingLockType" jdbcType="VARCHAR" />
    <result column="waiting_lock_duration" property="waitingLockDuration" jdbcType="VARCHAR" />
    <result column="waiting_query_secs" property="waitingQuerySecs" jdbcType="BIGINT" />
    <result column="waiting_query_rows_affected" property="waitingQueryRowsAffected" jdbcType="BIGINT" />
    <result column="waiting_query_rows_examined" property="waitingQueryRowsExamined" jdbcType="BIGINT" />
    <result column="blocking_thread_id" property="blockingThreadId" jdbcType="BIGINT" />
    <result column="blocking_pid" property="blockingPid" jdbcType="BIGINT" />
    <result column="blocking_lock_type" property="blockingLockType" jdbcType="VARCHAR" />
    <result column="blocking_lock_duration" property="blockingLockDuration" jdbcType="VARCHAR" />
    <result column="sql_kill_blocking_query" property="sqlKillBlockingQuery" jdbcType="VARCHAR" />
    <result column="sql_kill_blocking_connection" property="sqlKillBlockingConnection" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yan.crowdfunding.entity.SchemaTableLockWaitsWithBLOBs" extends="BaseResultMap" >
    <result column="waiting_account" property="waitingAccount" jdbcType="LONGVARCHAR" />
    <result column="waiting_query" property="waitingQuery" jdbcType="LONGVARCHAR" />
    <result column="blocking_account" property="blockingAccount" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    object_schema, object_name, waiting_thread_id, waiting_pid, waiting_lock_type, waiting_lock_duration, 
    waiting_query_secs, waiting_query_rows_affected, waiting_query_rows_examined, blocking_thread_id, 
    blocking_pid, blocking_lock_type, blocking_lock_duration, sql_kill_blocking_query, 
    sql_kill_blocking_connection
  </sql>
  <sql id="Blob_Column_List" >
    waiting_account, waiting_query, blocking_account
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from schema_table_lock_waits
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from schema_table_lock_waits
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsExample" >
    delete from schema_table_lock_waits
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsWithBLOBs" >
    insert into schema_table_lock_waits (object_schema, object_name, waiting_thread_id, 
      waiting_pid, waiting_lock_type, waiting_lock_duration, 
      waiting_query_secs, waiting_query_rows_affected, 
      waiting_query_rows_examined, blocking_thread_id, 
      blocking_pid, blocking_lock_type, blocking_lock_duration, 
      sql_kill_blocking_query, sql_kill_blocking_connection, 
      waiting_account, waiting_query, blocking_account
      )
    values (#{objectSchema,jdbcType=VARCHAR}, #{objectName,jdbcType=VARCHAR}, #{waitingThreadId,jdbcType=BIGINT}, 
      #{waitingPid,jdbcType=BIGINT}, #{waitingLockType,jdbcType=VARCHAR}, #{waitingLockDuration,jdbcType=VARCHAR}, 
      #{waitingQuerySecs,jdbcType=BIGINT}, #{waitingQueryRowsAffected,jdbcType=BIGINT}, 
      #{waitingQueryRowsExamined,jdbcType=BIGINT}, #{blockingThreadId,jdbcType=BIGINT}, 
      #{blockingPid,jdbcType=BIGINT}, #{blockingLockType,jdbcType=VARCHAR}, #{blockingLockDuration,jdbcType=VARCHAR}, 
      #{sqlKillBlockingQuery,jdbcType=VARCHAR}, #{sqlKillBlockingConnection,jdbcType=VARCHAR}, 
      #{waitingAccount,jdbcType=LONGVARCHAR}, #{waitingQuery,jdbcType=LONGVARCHAR}, #{blockingAccount,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsWithBLOBs" >
    insert into schema_table_lock_waits
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="objectSchema != null" >
        object_schema,
      </if>
      <if test="objectName != null" >
        object_name,
      </if>
      <if test="waitingThreadId != null" >
        waiting_thread_id,
      </if>
      <if test="waitingPid != null" >
        waiting_pid,
      </if>
      <if test="waitingLockType != null" >
        waiting_lock_type,
      </if>
      <if test="waitingLockDuration != null" >
        waiting_lock_duration,
      </if>
      <if test="waitingQuerySecs != null" >
        waiting_query_secs,
      </if>
      <if test="waitingQueryRowsAffected != null" >
        waiting_query_rows_affected,
      </if>
      <if test="waitingQueryRowsExamined != null" >
        waiting_query_rows_examined,
      </if>
      <if test="blockingThreadId != null" >
        blocking_thread_id,
      </if>
      <if test="blockingPid != null" >
        blocking_pid,
      </if>
      <if test="blockingLockType != null" >
        blocking_lock_type,
      </if>
      <if test="blockingLockDuration != null" >
        blocking_lock_duration,
      </if>
      <if test="sqlKillBlockingQuery != null" >
        sql_kill_blocking_query,
      </if>
      <if test="sqlKillBlockingConnection != null" >
        sql_kill_blocking_connection,
      </if>
      <if test="waitingAccount != null" >
        waiting_account,
      </if>
      <if test="waitingQuery != null" >
        waiting_query,
      </if>
      <if test="blockingAccount != null" >
        blocking_account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="objectSchema != null" >
        #{objectSchema,jdbcType=VARCHAR},
      </if>
      <if test="objectName != null" >
        #{objectName,jdbcType=VARCHAR},
      </if>
      <if test="waitingThreadId != null" >
        #{waitingThreadId,jdbcType=BIGINT},
      </if>
      <if test="waitingPid != null" >
        #{waitingPid,jdbcType=BIGINT},
      </if>
      <if test="waitingLockType != null" >
        #{waitingLockType,jdbcType=VARCHAR},
      </if>
      <if test="waitingLockDuration != null" >
        #{waitingLockDuration,jdbcType=VARCHAR},
      </if>
      <if test="waitingQuerySecs != null" >
        #{waitingQuerySecs,jdbcType=BIGINT},
      </if>
      <if test="waitingQueryRowsAffected != null" >
        #{waitingQueryRowsAffected,jdbcType=BIGINT},
      </if>
      <if test="waitingQueryRowsExamined != null" >
        #{waitingQueryRowsExamined,jdbcType=BIGINT},
      </if>
      <if test="blockingThreadId != null" >
        #{blockingThreadId,jdbcType=BIGINT},
      </if>
      <if test="blockingPid != null" >
        #{blockingPid,jdbcType=BIGINT},
      </if>
      <if test="blockingLockType != null" >
        #{blockingLockType,jdbcType=VARCHAR},
      </if>
      <if test="blockingLockDuration != null" >
        #{blockingLockDuration,jdbcType=VARCHAR},
      </if>
      <if test="sqlKillBlockingQuery != null" >
        #{sqlKillBlockingQuery,jdbcType=VARCHAR},
      </if>
      <if test="sqlKillBlockingConnection != null" >
        #{sqlKillBlockingConnection,jdbcType=VARCHAR},
      </if>
      <if test="waitingAccount != null" >
        #{waitingAccount,jdbcType=LONGVARCHAR},
      </if>
      <if test="waitingQuery != null" >
        #{waitingQuery,jdbcType=LONGVARCHAR},
      </if>
      <if test="blockingAccount != null" >
        #{blockingAccount,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.SchemaTableLockWaitsExample" resultType="java.lang.Integer" >
    select count(*) from schema_table_lock_waits
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update schema_table_lock_waits
    <set >
      <if test="record.objectSchema != null" >
        object_schema = #{record.objectSchema,jdbcType=VARCHAR},
      </if>
      <if test="record.objectName != null" >
        object_name = #{record.objectName,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingThreadId != null" >
        waiting_thread_id = #{record.waitingThreadId,jdbcType=BIGINT},
      </if>
      <if test="record.waitingPid != null" >
        waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      </if>
      <if test="record.waitingLockType != null" >
        waiting_lock_type = #{record.waitingLockType,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingLockDuration != null" >
        waiting_lock_duration = #{record.waitingLockDuration,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingQuerySecs != null" >
        waiting_query_secs = #{record.waitingQuerySecs,jdbcType=BIGINT},
      </if>
      <if test="record.waitingQueryRowsAffected != null" >
        waiting_query_rows_affected = #{record.waitingQueryRowsAffected,jdbcType=BIGINT},
      </if>
      <if test="record.waitingQueryRowsExamined != null" >
        waiting_query_rows_examined = #{record.waitingQueryRowsExamined,jdbcType=BIGINT},
      </if>
      <if test="record.blockingThreadId != null" >
        blocking_thread_id = #{record.blockingThreadId,jdbcType=BIGINT},
      </if>
      <if test="record.blockingPid != null" >
        blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      </if>
      <if test="record.blockingLockType != null" >
        blocking_lock_type = #{record.blockingLockType,jdbcType=VARCHAR},
      </if>
      <if test="record.blockingLockDuration != null" >
        blocking_lock_duration = #{record.blockingLockDuration,jdbcType=VARCHAR},
      </if>
      <if test="record.sqlKillBlockingQuery != null" >
        sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      </if>
      <if test="record.sqlKillBlockingConnection != null" >
        sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR},
      </if>
      <if test="record.waitingAccount != null" >
        waiting_account = #{record.waitingAccount,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.waitingQuery != null" >
        waiting_query = #{record.waitingQuery,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.blockingAccount != null" >
        blocking_account = #{record.blockingAccount,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update schema_table_lock_waits
    set object_schema = #{record.objectSchema,jdbcType=VARCHAR},
      object_name = #{record.objectName,jdbcType=VARCHAR},
      waiting_thread_id = #{record.waitingThreadId,jdbcType=BIGINT},
      waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      waiting_lock_type = #{record.waitingLockType,jdbcType=VARCHAR},
      waiting_lock_duration = #{record.waitingLockDuration,jdbcType=VARCHAR},
      waiting_query_secs = #{record.waitingQuerySecs,jdbcType=BIGINT},
      waiting_query_rows_affected = #{record.waitingQueryRowsAffected,jdbcType=BIGINT},
      waiting_query_rows_examined = #{record.waitingQueryRowsExamined,jdbcType=BIGINT},
      blocking_thread_id = #{record.blockingThreadId,jdbcType=BIGINT},
      blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      blocking_lock_type = #{record.blockingLockType,jdbcType=VARCHAR},
      blocking_lock_duration = #{record.blockingLockDuration,jdbcType=VARCHAR},
      sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR},
      waiting_account = #{record.waitingAccount,jdbcType=LONGVARCHAR},
      waiting_query = #{record.waitingQuery,jdbcType=LONGVARCHAR},
      blocking_account = #{record.blockingAccount,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update schema_table_lock_waits
    set object_schema = #{record.objectSchema,jdbcType=VARCHAR},
      object_name = #{record.objectName,jdbcType=VARCHAR},
      waiting_thread_id = #{record.waitingThreadId,jdbcType=BIGINT},
      waiting_pid = #{record.waitingPid,jdbcType=BIGINT},
      waiting_lock_type = #{record.waitingLockType,jdbcType=VARCHAR},
      waiting_lock_duration = #{record.waitingLockDuration,jdbcType=VARCHAR},
      waiting_query_secs = #{record.waitingQuerySecs,jdbcType=BIGINT},
      waiting_query_rows_affected = #{record.waitingQueryRowsAffected,jdbcType=BIGINT},
      waiting_query_rows_examined = #{record.waitingQueryRowsExamined,jdbcType=BIGINT},
      blocking_thread_id = #{record.blockingThreadId,jdbcType=BIGINT},
      blocking_pid = #{record.blockingPid,jdbcType=BIGINT},
      blocking_lock_type = #{record.blockingLockType,jdbcType=VARCHAR},
      blocking_lock_duration = #{record.blockingLockDuration,jdbcType=VARCHAR},
      sql_kill_blocking_query = #{record.sqlKillBlockingQuery,jdbcType=VARCHAR},
      sql_kill_blocking_connection = #{record.sqlKillBlockingConnection,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>