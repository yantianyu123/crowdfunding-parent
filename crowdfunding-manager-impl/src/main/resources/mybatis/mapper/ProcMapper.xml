<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yan.crowdfunding.mapper.ProcMapper" >
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.Proc" >
    <result column="db" property="db" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="type" property="type" jdbcType="CHAR" />
    <result column="specific_name" property="specificName" jdbcType="CHAR" />
    <result column="language" property="language" jdbcType="CHAR" />
    <result column="sql_data_access" property="sqlDataAccess" jdbcType="CHAR" />
    <result column="is_deterministic" property="isDeterministic" jdbcType="CHAR" />
    <result column="security_type" property="securityType" jdbcType="CHAR" />
    <result column="definer" property="definer" jdbcType="CHAR" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="modified" property="modified" jdbcType="TIMESTAMP" />
    <result column="sql_mode" property="sqlMode" jdbcType="CHAR" />
    <result column="character_set_client" property="characterSetClient" jdbcType="CHAR" />
    <result column="collation_connection" property="collationConnection" jdbcType="CHAR" />
    <result column="db_collation" property="dbCollation" jdbcType="CHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yan.crowdfunding.entity.ProcWithBLOBs" extends="BaseResultMap" >
    <result column="param_list" property="paramList" jdbcType="LONGVARBINARY" />
    <result column="returns" property="returns" jdbcType="LONGVARBINARY" />
    <result column="body" property="body" jdbcType="LONGVARBINARY" />
    <result column="comment" property="comment" jdbcType="LONGVARCHAR" />
    <result column="body_utf8" property="bodyUtf8" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    db, name, type, specific_name, language, sql_data_access, is_deterministic, security_type, 
    definer, created, modified, sql_mode, character_set_client, collation_connection, 
    db_collation
  </sql>
  <sql id="Blob_Column_List" >
    param_list, returns, body, comment, body_utf8
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.yan.crowdfunding.entity.ProcExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from proc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yan.crowdfunding.entity.ProcExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from proc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.ProcExample" >
    delete from proc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.ProcWithBLOBs" >
    insert into proc (db, name, type, specific_name, 
      language, sql_data_access, is_deterministic, 
      security_type, definer, created, 
      modified, sql_mode, character_set_client, 
      collation_connection, db_collation, param_list, 
      returns, body, comment, 
      body_utf8)
    values (#{db,jdbcType=CHAR}, #{name,jdbcType=CHAR}, #{type,jdbcType=CHAR}, #{specificName,jdbcType=CHAR}, 
      #{language,jdbcType=CHAR}, #{sqlDataAccess,jdbcType=CHAR}, #{isDeterministic,jdbcType=CHAR}, 
      #{securityType,jdbcType=CHAR}, #{definer,jdbcType=CHAR}, #{created,jdbcType=TIMESTAMP}, 
      #{modified,jdbcType=TIMESTAMP}, #{sqlMode,jdbcType=CHAR}, #{characterSetClient,jdbcType=CHAR}, 
      #{collationConnection,jdbcType=CHAR}, #{dbCollation,jdbcType=CHAR}, #{paramList,jdbcType=LONGVARBINARY}, 
      #{returns,jdbcType=LONGVARBINARY}, #{body,jdbcType=LONGVARBINARY}, #{comment,jdbcType=LONGVARCHAR}, 
      #{bodyUtf8,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.ProcWithBLOBs" >
    insert into proc
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="db != null" >
        db,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="specificName != null" >
        specific_name,
      </if>
      <if test="language != null" >
        language,
      </if>
      <if test="sqlDataAccess != null" >
        sql_data_access,
      </if>
      <if test="isDeterministic != null" >
        is_deterministic,
      </if>
      <if test="securityType != null" >
        security_type,
      </if>
      <if test="definer != null" >
        definer,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="modified != null" >
        modified,
      </if>
      <if test="sqlMode != null" >
        sql_mode,
      </if>
      <if test="characterSetClient != null" >
        character_set_client,
      </if>
      <if test="collationConnection != null" >
        collation_connection,
      </if>
      <if test="dbCollation != null" >
        db_collation,
      </if>
      <if test="paramList != null" >
        param_list,
      </if>
      <if test="returns != null" >
        returns,
      </if>
      <if test="body != null" >
        body,
      </if>
      <if test="comment != null" >
        comment,
      </if>
      <if test="bodyUtf8 != null" >
        body_utf8,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="db != null" >
        #{db,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=CHAR},
      </if>
      <if test="specificName != null" >
        #{specificName,jdbcType=CHAR},
      </if>
      <if test="language != null" >
        #{language,jdbcType=CHAR},
      </if>
      <if test="sqlDataAccess != null" >
        #{sqlDataAccess,jdbcType=CHAR},
      </if>
      <if test="isDeterministic != null" >
        #{isDeterministic,jdbcType=CHAR},
      </if>
      <if test="securityType != null" >
        #{securityType,jdbcType=CHAR},
      </if>
      <if test="definer != null" >
        #{definer,jdbcType=CHAR},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="modified != null" >
        #{modified,jdbcType=TIMESTAMP},
      </if>
      <if test="sqlMode != null" >
        #{sqlMode,jdbcType=CHAR},
      </if>
      <if test="characterSetClient != null" >
        #{characterSetClient,jdbcType=CHAR},
      </if>
      <if test="collationConnection != null" >
        #{collationConnection,jdbcType=CHAR},
      </if>
      <if test="dbCollation != null" >
        #{dbCollation,jdbcType=CHAR},
      </if>
      <if test="paramList != null" >
        #{paramList,jdbcType=LONGVARBINARY},
      </if>
      <if test="returns != null" >
        #{returns,jdbcType=LONGVARBINARY},
      </if>
      <if test="body != null" >
        #{body,jdbcType=LONGVARBINARY},
      </if>
      <if test="comment != null" >
        #{comment,jdbcType=LONGVARCHAR},
      </if>
      <if test="bodyUtf8 != null" >
        #{bodyUtf8,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.ProcExample" resultType="java.lang.Integer" >
    select count(*) from proc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update proc
    <set >
      <if test="record.db != null" >
        db = #{record.db,jdbcType=CHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=CHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.specificName != null" >
        specific_name = #{record.specificName,jdbcType=CHAR},
      </if>
      <if test="record.language != null" >
        language = #{record.language,jdbcType=CHAR},
      </if>
      <if test="record.sqlDataAccess != null" >
        sql_data_access = #{record.sqlDataAccess,jdbcType=CHAR},
      </if>
      <if test="record.isDeterministic != null" >
        is_deterministic = #{record.isDeterministic,jdbcType=CHAR},
      </if>
      <if test="record.securityType != null" >
        security_type = #{record.securityType,jdbcType=CHAR},
      </if>
      <if test="record.definer != null" >
        definer = #{record.definer,jdbcType=CHAR},
      </if>
      <if test="record.created != null" >
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modified != null" >
        modified = #{record.modified,jdbcType=TIMESTAMP},
      </if>
      <if test="record.sqlMode != null" >
        sql_mode = #{record.sqlMode,jdbcType=CHAR},
      </if>
      <if test="record.characterSetClient != null" >
        character_set_client = #{record.characterSetClient,jdbcType=CHAR},
      </if>
      <if test="record.collationConnection != null" >
        collation_connection = #{record.collationConnection,jdbcType=CHAR},
      </if>
      <if test="record.dbCollation != null" >
        db_collation = #{record.dbCollation,jdbcType=CHAR},
      </if>
      <if test="record.paramList != null" >
        param_list = #{record.paramList,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.returns != null" >
        returns = #{record.returns,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.body != null" >
        body = #{record.body,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.comment != null" >
        comment = #{record.comment,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bodyUtf8 != null" >
        body_utf8 = #{record.bodyUtf8,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update proc
    set db = #{record.db,jdbcType=CHAR},
      name = #{record.name,jdbcType=CHAR},
      type = #{record.type,jdbcType=CHAR},
      specific_name = #{record.specificName,jdbcType=CHAR},
      language = #{record.language,jdbcType=CHAR},
      sql_data_access = #{record.sqlDataAccess,jdbcType=CHAR},
      is_deterministic = #{record.isDeterministic,jdbcType=CHAR},
      security_type = #{record.securityType,jdbcType=CHAR},
      definer = #{record.definer,jdbcType=CHAR},
      created = #{record.created,jdbcType=TIMESTAMP},
      modified = #{record.modified,jdbcType=TIMESTAMP},
      sql_mode = #{record.sqlMode,jdbcType=CHAR},
      character_set_client = #{record.characterSetClient,jdbcType=CHAR},
      collation_connection = #{record.collationConnection,jdbcType=CHAR},
      db_collation = #{record.dbCollation,jdbcType=CHAR},
      param_list = #{record.paramList,jdbcType=LONGVARBINARY},
      returns = #{record.returns,jdbcType=LONGVARBINARY},
      body = #{record.body,jdbcType=LONGVARBINARY},
      comment = #{record.comment,jdbcType=LONGVARCHAR},
      body_utf8 = #{record.bodyUtf8,jdbcType=LONGVARBINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update proc
    set db = #{record.db,jdbcType=CHAR},
      name = #{record.name,jdbcType=CHAR},
      type = #{record.type,jdbcType=CHAR},
      specific_name = #{record.specificName,jdbcType=CHAR},
      language = #{record.language,jdbcType=CHAR},
      sql_data_access = #{record.sqlDataAccess,jdbcType=CHAR},
      is_deterministic = #{record.isDeterministic,jdbcType=CHAR},
      security_type = #{record.securityType,jdbcType=CHAR},
      definer = #{record.definer,jdbcType=CHAR},
      created = #{record.created,jdbcType=TIMESTAMP},
      modified = #{record.modified,jdbcType=TIMESTAMP},
      sql_mode = #{record.sqlMode,jdbcType=CHAR},
      character_set_client = #{record.characterSetClient,jdbcType=CHAR},
      collation_connection = #{record.collationConnection,jdbcType=CHAR},
      db_collation = #{record.dbCollation,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>