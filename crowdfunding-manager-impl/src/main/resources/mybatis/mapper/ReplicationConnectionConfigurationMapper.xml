<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yan.crowdfunding.mapper.ReplicationConnectionConfigurationMapper" >
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.ReplicationConnectionConfiguration" >
    <result column="CHANNEL_NAME" property="channelName" jdbcType="CHAR" />
    <result column="HOST" property="host" jdbcType="CHAR" />
    <result column="PORT" property="port" jdbcType="INTEGER" />
    <result column="USER" property="user" jdbcType="CHAR" />
    <result column="NETWORK_INTERFACE" property="networkInterface" jdbcType="CHAR" />
    <result column="AUTO_POSITION" property="autoPosition" jdbcType="CHAR" />
    <result column="SSL_ALLOWED" property="sslAllowed" jdbcType="CHAR" />
    <result column="SSL_CA_FILE" property="sslCaFile" jdbcType="VARCHAR" />
    <result column="SSL_CA_PATH" property="sslCaPath" jdbcType="VARCHAR" />
    <result column="SSL_CERTIFICATE" property="sslCertificate" jdbcType="VARCHAR" />
    <result column="SSL_CIPHER" property="sslCipher" jdbcType="VARCHAR" />
    <result column="SSL_KEY" property="sslKey" jdbcType="VARCHAR" />
    <result column="SSL_VERIFY_SERVER_CERTIFICATE" property="sslVerifyServerCertificate" jdbcType="CHAR" />
    <result column="SSL_CRL_FILE" property="sslCrlFile" jdbcType="VARCHAR" />
    <result column="SSL_CRL_PATH" property="sslCrlPath" jdbcType="VARCHAR" />
    <result column="CONNECTION_RETRY_INTERVAL" property="connectionRetryInterval" jdbcType="INTEGER" />
    <result column="CONNECTION_RETRY_COUNT" property="connectionRetryCount" jdbcType="BIGINT" />
    <result column="HEARTBEAT_INTERVAL" property="heartbeatInterval" jdbcType="DOUBLE" />
    <result column="TLS_VERSION" property="tlsVersion" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CHANNEL_NAME, HOST, PORT, USER, NETWORK_INTERFACE, AUTO_POSITION, SSL_ALLOWED, SSL_CA_FILE, 
    SSL_CA_PATH, SSL_CERTIFICATE, SSL_CIPHER, SSL_KEY, SSL_VERIFY_SERVER_CERTIFICATE, 
    SSL_CRL_FILE, SSL_CRL_PATH, CONNECTION_RETRY_INTERVAL, CONNECTION_RETRY_COUNT, HEARTBEAT_INTERVAL, 
    TLS_VERSION
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yan.crowdfunding.entity.ReplicationConnectionConfigurationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replication_connection_configuration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.ReplicationConnectionConfigurationExample" >
    delete from replication_connection_configuration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.ReplicationConnectionConfiguration" >
    insert into replication_connection_configuration (CHANNEL_NAME, HOST, PORT, 
      USER, NETWORK_INTERFACE, AUTO_POSITION, 
      SSL_ALLOWED, SSL_CA_FILE, SSL_CA_PATH, 
      SSL_CERTIFICATE, SSL_CIPHER, SSL_KEY, 
      SSL_VERIFY_SERVER_CERTIFICATE, SSL_CRL_FILE, SSL_CRL_PATH, 
      CONNECTION_RETRY_INTERVAL, CONNECTION_RETRY_COUNT, 
      HEARTBEAT_INTERVAL, TLS_VERSION)
    values (#{channelName,jdbcType=CHAR}, #{host,jdbcType=CHAR}, #{port,jdbcType=INTEGER}, 
      #{user,jdbcType=CHAR}, #{networkInterface,jdbcType=CHAR}, #{autoPosition,jdbcType=CHAR}, 
      #{sslAllowed,jdbcType=CHAR}, #{sslCaFile,jdbcType=VARCHAR}, #{sslCaPath,jdbcType=VARCHAR}, 
      #{sslCertificate,jdbcType=VARCHAR}, #{sslCipher,jdbcType=VARCHAR}, #{sslKey,jdbcType=VARCHAR}, 
      #{sslVerifyServerCertificate,jdbcType=CHAR}, #{sslCrlFile,jdbcType=VARCHAR}, #{sslCrlPath,jdbcType=VARCHAR}, 
      #{connectionRetryInterval,jdbcType=INTEGER}, #{connectionRetryCount,jdbcType=BIGINT}, 
      #{heartbeatInterval,jdbcType=DOUBLE}, #{tlsVersion,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.ReplicationConnectionConfiguration" >
    insert into replication_connection_configuration
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="channelName != null" >
        CHANNEL_NAME,
      </if>
      <if test="host != null" >
        HOST,
      </if>
      <if test="port != null" >
        PORT,
      </if>
      <if test="user != null" >
        USER,
      </if>
      <if test="networkInterface != null" >
        NETWORK_INTERFACE,
      </if>
      <if test="autoPosition != null" >
        AUTO_POSITION,
      </if>
      <if test="sslAllowed != null" >
        SSL_ALLOWED,
      </if>
      <if test="sslCaFile != null" >
        SSL_CA_FILE,
      </if>
      <if test="sslCaPath != null" >
        SSL_CA_PATH,
      </if>
      <if test="sslCertificate != null" >
        SSL_CERTIFICATE,
      </if>
      <if test="sslCipher != null" >
        SSL_CIPHER,
      </if>
      <if test="sslKey != null" >
        SSL_KEY,
      </if>
      <if test="sslVerifyServerCertificate != null" >
        SSL_VERIFY_SERVER_CERTIFICATE,
      </if>
      <if test="sslCrlFile != null" >
        SSL_CRL_FILE,
      </if>
      <if test="sslCrlPath != null" >
        SSL_CRL_PATH,
      </if>
      <if test="connectionRetryInterval != null" >
        CONNECTION_RETRY_INTERVAL,
      </if>
      <if test="connectionRetryCount != null" >
        CONNECTION_RETRY_COUNT,
      </if>
      <if test="heartbeatInterval != null" >
        HEARTBEAT_INTERVAL,
      </if>
      <if test="tlsVersion != null" >
        TLS_VERSION,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="channelName != null" >
        #{channelName,jdbcType=CHAR},
      </if>
      <if test="host != null" >
        #{host,jdbcType=CHAR},
      </if>
      <if test="port != null" >
        #{port,jdbcType=INTEGER},
      </if>
      <if test="user != null" >
        #{user,jdbcType=CHAR},
      </if>
      <if test="networkInterface != null" >
        #{networkInterface,jdbcType=CHAR},
      </if>
      <if test="autoPosition != null" >
        #{autoPosition,jdbcType=CHAR},
      </if>
      <if test="sslAllowed != null" >
        #{sslAllowed,jdbcType=CHAR},
      </if>
      <if test="sslCaFile != null" >
        #{sslCaFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCaPath != null" >
        #{sslCaPath,jdbcType=VARCHAR},
      </if>
      <if test="sslCertificate != null" >
        #{sslCertificate,jdbcType=VARCHAR},
      </if>
      <if test="sslCipher != null" >
        #{sslCipher,jdbcType=VARCHAR},
      </if>
      <if test="sslKey != null" >
        #{sslKey,jdbcType=VARCHAR},
      </if>
      <if test="sslVerifyServerCertificate != null" >
        #{sslVerifyServerCertificate,jdbcType=CHAR},
      </if>
      <if test="sslCrlFile != null" >
        #{sslCrlFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCrlPath != null" >
        #{sslCrlPath,jdbcType=VARCHAR},
      </if>
      <if test="connectionRetryInterval != null" >
        #{connectionRetryInterval,jdbcType=INTEGER},
      </if>
      <if test="connectionRetryCount != null" >
        #{connectionRetryCount,jdbcType=BIGINT},
      </if>
      <if test="heartbeatInterval != null" >
        #{heartbeatInterval,jdbcType=DOUBLE},
      </if>
      <if test="tlsVersion != null" >
        #{tlsVersion,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.ReplicationConnectionConfigurationExample" resultType="java.lang.Integer" >
    select count(*) from replication_connection_configuration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update replication_connection_configuration
    <set >
      <if test="record.channelName != null" >
        CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      </if>
      <if test="record.host != null" >
        HOST = #{record.host,jdbcType=CHAR},
      </if>
      <if test="record.port != null" >
        PORT = #{record.port,jdbcType=INTEGER},
      </if>
      <if test="record.user != null" >
        USER = #{record.user,jdbcType=CHAR},
      </if>
      <if test="record.networkInterface != null" >
        NETWORK_INTERFACE = #{record.networkInterface,jdbcType=CHAR},
      </if>
      <if test="record.autoPosition != null" >
        AUTO_POSITION = #{record.autoPosition,jdbcType=CHAR},
      </if>
      <if test="record.sslAllowed != null" >
        SSL_ALLOWED = #{record.sslAllowed,jdbcType=CHAR},
      </if>
      <if test="record.sslCaFile != null" >
        SSL_CA_FILE = #{record.sslCaFile,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCaPath != null" >
        SSL_CA_PATH = #{record.sslCaPath,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCertificate != null" >
        SSL_CERTIFICATE = #{record.sslCertificate,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCipher != null" >
        SSL_CIPHER = #{record.sslCipher,jdbcType=VARCHAR},
      </if>
      <if test="record.sslKey != null" >
        SSL_KEY = #{record.sslKey,jdbcType=VARCHAR},
      </if>
      <if test="record.sslVerifyServerCertificate != null" >
        SSL_VERIFY_SERVER_CERTIFICATE = #{record.sslVerifyServerCertificate,jdbcType=CHAR},
      </if>
      <if test="record.sslCrlFile != null" >
        SSL_CRL_FILE = #{record.sslCrlFile,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCrlPath != null" >
        SSL_CRL_PATH = #{record.sslCrlPath,jdbcType=VARCHAR},
      </if>
      <if test="record.connectionRetryInterval != null" >
        CONNECTION_RETRY_INTERVAL = #{record.connectionRetryInterval,jdbcType=INTEGER},
      </if>
      <if test="record.connectionRetryCount != null" >
        CONNECTION_RETRY_COUNT = #{record.connectionRetryCount,jdbcType=BIGINT},
      </if>
      <if test="record.heartbeatInterval != null" >
        HEARTBEAT_INTERVAL = #{record.heartbeatInterval,jdbcType=DOUBLE},
      </if>
      <if test="record.tlsVersion != null" >
        TLS_VERSION = #{record.tlsVersion,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update replication_connection_configuration
    set CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      HOST = #{record.host,jdbcType=CHAR},
      PORT = #{record.port,jdbcType=INTEGER},
      USER = #{record.user,jdbcType=CHAR},
      NETWORK_INTERFACE = #{record.networkInterface,jdbcType=CHAR},
      AUTO_POSITION = #{record.autoPosition,jdbcType=CHAR},
      SSL_ALLOWED = #{record.sslAllowed,jdbcType=CHAR},
      SSL_CA_FILE = #{record.sslCaFile,jdbcType=VARCHAR},
      SSL_CA_PATH = #{record.sslCaPath,jdbcType=VARCHAR},
      SSL_CERTIFICATE = #{record.sslCertificate,jdbcType=VARCHAR},
      SSL_CIPHER = #{record.sslCipher,jdbcType=VARCHAR},
      SSL_KEY = #{record.sslKey,jdbcType=VARCHAR},
      SSL_VERIFY_SERVER_CERTIFICATE = #{record.sslVerifyServerCertificate,jdbcType=CHAR},
      SSL_CRL_FILE = #{record.sslCrlFile,jdbcType=VARCHAR},
      SSL_CRL_PATH = #{record.sslCrlPath,jdbcType=VARCHAR},
      CONNECTION_RETRY_INTERVAL = #{record.connectionRetryInterval,jdbcType=INTEGER},
      CONNECTION_RETRY_COUNT = #{record.connectionRetryCount,jdbcType=BIGINT},
      HEARTBEAT_INTERVAL = #{record.heartbeatInterval,jdbcType=DOUBLE},
      TLS_VERSION = #{record.tlsVersion,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>