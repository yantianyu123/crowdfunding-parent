<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yan.crowdfunding.mapper.ProcesslistMapper">
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.Processlist">
    <result column="thd_id" jdbcType="BIGINT" property="thdId" />
    <result column="conn_id" jdbcType="BIGINT" property="connId" />
    <result column="user" jdbcType="VARCHAR" property="user" />
    <result column="db" jdbcType="VARCHAR" property="db" />
    <result column="command" jdbcType="VARCHAR" property="command" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="time" jdbcType="BIGINT" property="time" />
    <result column="progress" jdbcType="DECIMAL" property="progress" />
    <result column="rows_examined" jdbcType="BIGINT" property="rowsExamined" />
    <result column="rows_sent" jdbcType="BIGINT" property="rowsSent" />
    <result column="rows_affected" jdbcType="BIGINT" property="rowsAffected" />
    <result column="tmp_tables" jdbcType="BIGINT" property="tmpTables" />
    <result column="tmp_disk_tables" jdbcType="BIGINT" property="tmpDiskTables" />
    <result column="full_scan" jdbcType="VARCHAR" property="fullScan" />
    <result column="last_wait" jdbcType="VARCHAR" property="lastWait" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="trx_state" jdbcType="CHAR" property="trxState" />
    <result column="trx_autocommit" jdbcType="CHAR" property="trxAutocommit" />
    <result column="pid" jdbcType="VARCHAR" property="pid" />
    <result column="program_name" jdbcType="VARCHAR" property="programName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yan.crowdfunding.entity.ProcesslistWithBLOBs">
    <result column="current_statement" jdbcType="LONGVARCHAR" property="currentStatement" />
    <result column="statement_latency" jdbcType="LONGVARCHAR" property="statementLatency" />
    <result column="lock_latency" jdbcType="LONGVARCHAR" property="lockLatency" />
    <result column="last_statement" jdbcType="LONGVARCHAR" property="lastStatement" />
    <result column="last_statement_latency" jdbcType="LONGVARCHAR" property="lastStatementLatency" />
    <result column="current_memory" jdbcType="LONGVARCHAR" property="currentMemory" />
    <result column="last_wait_latency" jdbcType="LONGVARCHAR" property="lastWaitLatency" />
    <result column="trx_latency" jdbcType="LONGVARCHAR" property="trxLatency" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    thd_id, conn_id, user, db, command, state, time, progress, rows_examined, rows_sent, 
    rows_affected, tmp_tables, tmp_disk_tables, full_scan, last_wait, source, trx_state, 
    trx_autocommit, pid, program_name
  </sql>
  <sql id="Blob_Column_List">
    current_statement, statement_latency, lock_latency, last_statement, last_statement_latency, 
    current_memory, last_wait_latency, trx_latency
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from processlist
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from processlist
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample">
    delete from processlist
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.ProcesslistWithBLOBs">
    insert into processlist (thd_id, conn_id, user, 
      db, command, state, 
      time, progress, rows_examined, 
      rows_sent, rows_affected, tmp_tables, 
      tmp_disk_tables, full_scan, last_wait, 
      source, trx_state, trx_autocommit, 
      pid, program_name, current_statement, 
      statement_latency, lock_latency, 
      last_statement, last_statement_latency, 
      current_memory, last_wait_latency, 
      trx_latency)
    values (#{thdId,jdbcType=BIGINT}, #{connId,jdbcType=BIGINT}, #{user,jdbcType=VARCHAR}, 
      #{db,jdbcType=VARCHAR}, #{command,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, 
      #{time,jdbcType=BIGINT}, #{progress,jdbcType=DECIMAL}, #{rowsExamined,jdbcType=BIGINT}, 
      #{rowsSent,jdbcType=BIGINT}, #{rowsAffected,jdbcType=BIGINT}, #{tmpTables,jdbcType=BIGINT}, 
      #{tmpDiskTables,jdbcType=BIGINT}, #{fullScan,jdbcType=VARCHAR}, #{lastWait,jdbcType=VARCHAR}, 
      #{source,jdbcType=VARCHAR}, #{trxState,jdbcType=CHAR}, #{trxAutocommit,jdbcType=CHAR}, 
      #{pid,jdbcType=VARCHAR}, #{programName,jdbcType=VARCHAR}, #{currentStatement,jdbcType=LONGVARCHAR}, 
      #{statementLatency,jdbcType=LONGVARCHAR}, #{lockLatency,jdbcType=LONGVARCHAR}, 
      #{lastStatement,jdbcType=LONGVARCHAR}, #{lastStatementLatency,jdbcType=LONGVARCHAR}, 
      #{currentMemory,jdbcType=LONGVARCHAR}, #{lastWaitLatency,jdbcType=LONGVARCHAR}, 
      #{trxLatency,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.ProcesslistWithBLOBs">
    insert into processlist
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="thdId != null">
        thd_id,
      </if>
      <if test="connId != null">
        conn_id,
      </if>
      <if test="user != null">
        user,
      </if>
      <if test="db != null">
        db,
      </if>
      <if test="command != null">
        command,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="progress != null">
        progress,
      </if>
      <if test="rowsExamined != null">
        rows_examined,
      </if>
      <if test="rowsSent != null">
        rows_sent,
      </if>
      <if test="rowsAffected != null">
        rows_affected,
      </if>
      <if test="tmpTables != null">
        tmp_tables,
      </if>
      <if test="tmpDiskTables != null">
        tmp_disk_tables,
      </if>
      <if test="fullScan != null">
        full_scan,
      </if>
      <if test="lastWait != null">
        last_wait,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="trxState != null">
        trx_state,
      </if>
      <if test="trxAutocommit != null">
        trx_autocommit,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="programName != null">
        program_name,
      </if>
      <if test="currentStatement != null">
        current_statement,
      </if>
      <if test="statementLatency != null">
        statement_latency,
      </if>
      <if test="lockLatency != null">
        lock_latency,
      </if>
      <if test="lastStatement != null">
        last_statement,
      </if>
      <if test="lastStatementLatency != null">
        last_statement_latency,
      </if>
      <if test="currentMemory != null">
        current_memory,
      </if>
      <if test="lastWaitLatency != null">
        last_wait_latency,
      </if>
      <if test="trxLatency != null">
        trx_latency,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="thdId != null">
        #{thdId,jdbcType=BIGINT},
      </if>
      <if test="connId != null">
        #{connId,jdbcType=BIGINT},
      </if>
      <if test="user != null">
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="db != null">
        #{db,jdbcType=VARCHAR},
      </if>
      <if test="command != null">
        #{command,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=BIGINT},
      </if>
      <if test="progress != null">
        #{progress,jdbcType=DECIMAL},
      </if>
      <if test="rowsExamined != null">
        #{rowsExamined,jdbcType=BIGINT},
      </if>
      <if test="rowsSent != null">
        #{rowsSent,jdbcType=BIGINT},
      </if>
      <if test="rowsAffected != null">
        #{rowsAffected,jdbcType=BIGINT},
      </if>
      <if test="tmpTables != null">
        #{tmpTables,jdbcType=BIGINT},
      </if>
      <if test="tmpDiskTables != null">
        #{tmpDiskTables,jdbcType=BIGINT},
      </if>
      <if test="fullScan != null">
        #{fullScan,jdbcType=VARCHAR},
      </if>
      <if test="lastWait != null">
        #{lastWait,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="trxState != null">
        #{trxState,jdbcType=CHAR},
      </if>
      <if test="trxAutocommit != null">
        #{trxAutocommit,jdbcType=CHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=VARCHAR},
      </if>
      <if test="programName != null">
        #{programName,jdbcType=VARCHAR},
      </if>
      <if test="currentStatement != null">
        #{currentStatement,jdbcType=LONGVARCHAR},
      </if>
      <if test="statementLatency != null">
        #{statementLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="lockLatency != null">
        #{lockLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="lastStatement != null">
        #{lastStatement,jdbcType=LONGVARCHAR},
      </if>
      <if test="lastStatementLatency != null">
        #{lastStatementLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="currentMemory != null">
        #{currentMemory,jdbcType=LONGVARCHAR},
      </if>
      <if test="lastWaitLatency != null">
        #{lastWaitLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="trxLatency != null">
        #{trxLatency,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultType="java.lang.Integer">
    select count(*) from processlist
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update processlist
    <set>
      <if test="record.thdId != null">
        thd_id = #{record.thdId,jdbcType=BIGINT},
      </if>
      <if test="record.connId != null">
        conn_id = #{record.connId,jdbcType=BIGINT},
      </if>
      <if test="record.user != null">
        user = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.db != null">
        db = #{record.db,jdbcType=VARCHAR},
      </if>
      <if test="record.command != null">
        command = #{record.command,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=BIGINT},
      </if>
      <if test="record.progress != null">
        progress = #{record.progress,jdbcType=DECIMAL},
      </if>
      <if test="record.rowsExamined != null">
        rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      </if>
      <if test="record.rowsSent != null">
        rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      </if>
      <if test="record.rowsAffected != null">
        rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      </if>
      <if test="record.tmpTables != null">
        tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      </if>
      <if test="record.tmpDiskTables != null">
        tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      </if>
      <if test="record.fullScan != null">
        full_scan = #{record.fullScan,jdbcType=VARCHAR},
      </if>
      <if test="record.lastWait != null">
        last_wait = #{record.lastWait,jdbcType=VARCHAR},
      </if>
      <if test="record.source != null">
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.trxState != null">
        trx_state = #{record.trxState,jdbcType=CHAR},
      </if>
      <if test="record.trxAutocommit != null">
        trx_autocommit = #{record.trxAutocommit,jdbcType=CHAR},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=VARCHAR},
      </if>
      <if test="record.programName != null">
        program_name = #{record.programName,jdbcType=VARCHAR},
      </if>
      <if test="record.currentStatement != null">
        current_statement = #{record.currentStatement,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.statementLatency != null">
        statement_latency = #{record.statementLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.lockLatency != null">
        lock_latency = #{record.lockLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.lastStatement != null">
        last_statement = #{record.lastStatement,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.lastStatementLatency != null">
        last_statement_latency = #{record.lastStatementLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.currentMemory != null">
        current_memory = #{record.currentMemory,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.lastWaitLatency != null">
        last_wait_latency = #{record.lastWaitLatency,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.trxLatency != null">
        trx_latency = #{record.trxLatency,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update processlist
    set thd_id = #{record.thdId,jdbcType=BIGINT},
      conn_id = #{record.connId,jdbcType=BIGINT},
      user = #{record.user,jdbcType=VARCHAR},
      db = #{record.db,jdbcType=VARCHAR},
      command = #{record.command,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=BIGINT},
      progress = #{record.progress,jdbcType=DECIMAL},
      rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      full_scan = #{record.fullScan,jdbcType=VARCHAR},
      last_wait = #{record.lastWait,jdbcType=VARCHAR},
      source = #{record.source,jdbcType=VARCHAR},
      trx_state = #{record.trxState,jdbcType=CHAR},
      trx_autocommit = #{record.trxAutocommit,jdbcType=CHAR},
      pid = #{record.pid,jdbcType=VARCHAR},
      program_name = #{record.programName,jdbcType=VARCHAR},
      current_statement = #{record.currentStatement,jdbcType=LONGVARCHAR},
      statement_latency = #{record.statementLatency,jdbcType=LONGVARCHAR},
      lock_latency = #{record.lockLatency,jdbcType=LONGVARCHAR},
      last_statement = #{record.lastStatement,jdbcType=LONGVARCHAR},
      last_statement_latency = #{record.lastStatementLatency,jdbcType=LONGVARCHAR},
      current_memory = #{record.currentMemory,jdbcType=LONGVARCHAR},
      last_wait_latency = #{record.lastWaitLatency,jdbcType=LONGVARCHAR},
      trx_latency = #{record.trxLatency,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update processlist
    set thd_id = #{record.thdId,jdbcType=BIGINT},
      conn_id = #{record.connId,jdbcType=BIGINT},
      user = #{record.user,jdbcType=VARCHAR},
      db = #{record.db,jdbcType=VARCHAR},
      command = #{record.command,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=BIGINT},
      progress = #{record.progress,jdbcType=DECIMAL},
      rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      full_scan = #{record.fullScan,jdbcType=VARCHAR},
      last_wait = #{record.lastWait,jdbcType=VARCHAR},
      source = #{record.source,jdbcType=VARCHAR},
      trx_state = #{record.trxState,jdbcType=CHAR},
      trx_autocommit = #{record.trxAutocommit,jdbcType=CHAR},
      pid = #{record.pid,jdbcType=VARCHAR},
      program_name = #{record.programName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <resultMap id="BaseResultMap" type="com.yan.crowdfunding.entity.Processlist">
    <result column="ID" jdbcType="BIGINT" property="id" />
    <result column="USER" jdbcType="VARCHAR" property="user" />
    <result column="HOST" jdbcType="VARCHAR" property="host" />
    <result column="DB" jdbcType="VARCHAR" property="db" />
    <result column="COMMAND" jdbcType="VARCHAR" property="command" />
    <result column="TIME" jdbcType="INTEGER" property="time" />
    <result column="STATE" jdbcType="VARCHAR" property="state" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yan.crowdfunding.entity.Processlist">
    <result column="INFO" jdbcType="LONGVARCHAR" property="info" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, USER, HOST, DB, COMMAND, TIME, STATE
  </sql>
  <sql id="Blob_Column_List">
    INFO
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from PROCESSLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from PROCESSLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample">
    delete from PROCESSLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yan.crowdfunding.entity.Processlist">
    insert into PROCESSLIST (ID, USER, HOST, 
      DB, COMMAND, TIME, 
      STATE, INFO)
    values (#{id,jdbcType=BIGINT}, #{user,jdbcType=VARCHAR}, #{host,jdbcType=VARCHAR}, 
      #{db,jdbcType=VARCHAR}, #{command,jdbcType=VARCHAR}, #{time,jdbcType=INTEGER}, 
      #{state,jdbcType=VARCHAR}, #{info,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yan.crowdfunding.entity.Processlist">
    insert into PROCESSLIST
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="user != null">
        USER,
      </if>
      <if test="host != null">
        HOST,
      </if>
      <if test="db != null">
        DB,
      </if>
      <if test="command != null">
        COMMAND,
      </if>
      <if test="time != null">
        TIME,
      </if>
      <if test="state != null">
        STATE,
      </if>
      <if test="info != null">
        INFO,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="user != null">
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="host != null">
        #{host,jdbcType=VARCHAR},
      </if>
      <if test="db != null">
        #{db,jdbcType=VARCHAR},
      </if>
      <if test="command != null">
        #{command,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="info != null">
        #{info,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yan.crowdfunding.entity.ProcesslistExample" resultType="java.lang.Integer">
    select count(*) from PROCESSLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update PROCESSLIST
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.user != null">
        USER = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.host != null">
        HOST = #{record.host,jdbcType=VARCHAR},
      </if>
      <if test="record.db != null">
        DB = #{record.db,jdbcType=VARCHAR},
      </if>
      <if test="record.command != null">
        COMMAND = #{record.command,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        TIME = #{record.time,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        STATE = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.info != null">
        INFO = #{record.info,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update PROCESSLIST
    set ID = #{record.id,jdbcType=BIGINT},
      USER = #{record.user,jdbcType=VARCHAR},
      HOST = #{record.host,jdbcType=VARCHAR},
      DB = #{record.db,jdbcType=VARCHAR},
      COMMAND = #{record.command,jdbcType=VARCHAR},
      TIME = #{record.time,jdbcType=INTEGER},
      STATE = #{record.state,jdbcType=VARCHAR},
      INFO = #{record.info,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update PROCESSLIST
    set ID = #{record.id,jdbcType=BIGINT},
      USER = #{record.user,jdbcType=VARCHAR},
      HOST = #{record.host,jdbcType=VARCHAR},
      DB = #{record.db,jdbcType=VARCHAR},
      COMMAND = #{record.command,jdbcType=VARCHAR},
      TIME = #{record.time,jdbcType=INTEGER},
      STATE = #{record.state,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>